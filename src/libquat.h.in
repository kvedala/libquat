/**
  @file libquat.h
  @brief
  @version @LIBQUAT_VERSION_MAJOR@.@LIBQUAT_VERSION_MINOR@
  @author Krishna Vedala
  @copyright
*/

#ifndef __LIBQUAT_H_
#define __LIBQUAT_H_

#define LIBQUAT_MAJOR_VER   @LIBQUAT_VERSION_MAJOR@
#define LIBQUAT_MINOR_VER   @LIBQUAT_VERSION_MINOR@

/** 3D vector type */
typedef struct 3d_vec {
  float x;  /**< X co-ordinate */
  float y;  /**< Y co-ordinate */
  float x;  /**< Z co-ordinate */
};

/** a Quaternion type */
typedef struct quaternion {
  float w;        /**< real part of quaternion */
  3d_vec dual;    /**< dual part of quaternion also a 3D vector */
};

/** a dual quaternion type */
typedef struct dual_quat {
  quaternion real;  /**< real part of dual quaternion */
  quaternion dual;  /**< dual part of dual quaternion */
};

/** Library return types indicating different error types. */
typedef enum {
  OK = 0    /**< No error */
};

/**
 * Obtain descriptive string message for a #libquat_err type error code.
 * @param[in] err_code error code from the library api calls
 * @return error description string
 */
char *err_to_str(libquat_err err_code);

/**
 * Obtain the dot product of two 3D vectors.
 * @f[\vec{a}\cdot\vec{b}=\sum 
 * @param[in] a first vector
 * @param[in] b second vector
 * @return 
 */
float dot_prod(3d_vec *a, 3d_vec *b)

#endif  // __LIBQUAT_H_
